name: checklists
on:
  issue_comment:
    types: [created, edited, deleted]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  report-status:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
      - uses: actions/github-script@v7
        id: issue-number
        with:
          script: |
            if (context.payload.pull_request) {
              return context.payload.pull_request.number;
            }

            if (context.payload.issue) {
              return context.payload.issue.number;
            }

            if (context.payload.comment) {
              return context.payload.issue.number;
            }

            throw new Error('Unable to find issue-number for event');
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.CHECKLIST_JAPP_ID }}
          private-key: ${{ secrets.CHECKLIST_PRIVATE_KEY }}
      - uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const CHECKLIST_REGEX = /^checklist: (.+)/g;
            const { data: labels } = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.issue-number.outputs.result }},
            });
            const checklists = labels.filter((label) => {
              return label.name.startsWith('checklist: ');
            }).map((label) => {
              const matches = label.name.matchAll(CHECKLIST_REGEX);
              if (matches.length === 0) {
                throw new Error('No checklist found in label');
              }

              const [match] = matches;
              const [_match, checklist] = match;
              if (!checklist) {
                throw new Error('Unable to find checklist from regex');
              }

              return checklist;
            });
            if (checklists.length === 0) {
              core.info('No checklists defined');
              return;
            }

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.issue-number.outputs.result }},
            });

            let hasIncompleteItems = false;

            for (const checklist of checklists) {
              const identifier = `<!-- source:actions checklist:${checklist} -->`;
              const comment = comments.find((comment) => {
                return comment.body.includes(identifier);
              });
              if (!comment) {
                throw new Error(`Unable to find comment for checklist: ${checklist}`);
              }

              for (const line of comment.body.split('\n')) {
                const trimmed = line.trim();
                if (trimmed.startsWith('- [ ]')) {
                  if (hasIncompleteItems === false) {
                    hasIncompleteItems = true;
                    const hasCompleteLabel = labels.find((label) => {
                      return label.name === 'checklists: complete';
                    });
                    if (hasCompleteLabel) {
                      await github.rest.issues.removeLabel({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: ${{ steps.issue-number.outputs.result }},
                        name: 'checklists: complete',
                      });
                    }
                    await github.rest.issues.addLabels({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: ${{ steps.issue-number.outputs.result }},
                      labels: ['checklists: incomplete'],
                    });
                  }
                  core.info(`Checklist item not checked: ${trimmed}`)
                } else if (trimmed.startsWith('- [x]')) {
                  core.info(`Checklist item checked: ${trimmed}`);
                }
              }
            }

            if (!hasIncompleteItems) {
              const hasIncompleteLabel = labels.find((label) => {
                return label.name === 'checklists: incomplete';
              });
              if (hasIncompleteLabel) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: ${{ steps.issue-number.outputs.result }},
                  name: 'checklists: incomplete',
                });
              }
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: ${{ steps.issue-number.outputs.result }},
                labels: ['checklists: complete'],
              });
            }

